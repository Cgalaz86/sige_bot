"""
Clase base para todos los m√≥dulos de descarga
"""
from abc import ABC, abstractmethod
from typing import Dict, Any, Optional
from core.selenium_manager import SeleniumManager
from core.logger import Logger

class BaseModule(ABC):
    """Clase base abstracta para m√≥dulos de descarga"""
    
    def __init__(self, selenium_manager: SeleniumManager, logger: Logger):
        self.selenium_manager = selenium_manager
        self.logger = logger
        self.module_name = self.__class__.__name__
    
    @property
    @abstractmethod
    def display_name(self) -> str:
        """Nombre para mostrar en la interfaz"""
        pass
    
    @property
    @abstractmethod
    def description(self) -> str:
        """Descripci√≥n del m√≥dulo"""
        pass
    
    @property
    def requires_year(self) -> bool:
        """Si el m√≥dulo requiere selecci√≥n de a√±o"""
        return False
    
    @property
    def additional_parameters(self) -> Dict[str, Any]:
        """Par√°metros adicionales que requiere el m√≥dulo"""
        return {}
    
    def validate_parameters(self, **kwargs) -> bool:
        """
        Validar par√°metros antes de ejecutar
        
        Args:
            **kwargs: Par√°metros a validar
            
        Returns:
            True si los par√°metros son v√°lidos
        """
        if self.requires_year:
            year = kwargs.get('year')
            if not year or not str(year).isdigit():
                self.logger.error(f"A√±o inv√°lido para {self.display_name}: {year}")
                return False
        
        return True
    
    @abstractmethod
    def execute(self, usuario: str, **kwargs) -> bool:
        """
        Ejecutar la descarga del m√≥dulo
        
        Args:
            usuario: Usuario/RBD del establecimiento
            **kwargs: Par√°metros adicionales espec√≠ficos del m√≥dulo
            
        Returns:
            True si la ejecuci√≥n fue exitosa
        """
        pass
    
    def pre_execute(self, **kwargs) -> bool:
        """
        Acciones a realizar antes de la ejecuci√≥n
        
        Args:
            **kwargs: Par√°metros del m√≥dulo
            
        Returns:
            True si las pre-acciones fueron exitosas
        """
        self.logger.info(f"üîÑ Iniciando m√≥dulo: {self.display_name}")
        return self.validate_parameters(**kwargs)
    
    def post_execute(self, success: bool, **kwargs) -> None:
        """
        Acciones a realizar despu√©s de la ejecuci√≥n
        
        Args:
            success: Si la ejecuci√≥n fue exitosa
            **kwargs: Par√°metros del m√≥dulo
        """
        if success:
            self.logger.success(f"‚úÖ M√≥dulo {self.display_name} completado exitosamente")
        else:
            self.logger.error(f"‚ùå Error en m√≥dulo {self.display_name}")
    
    def run(self, usuario: str, **kwargs) -> bool:
        """
        Ejecutar el m√≥dulo completo con pre y post procesamiento
        
        Args:
            usuario: Usuario/RBD del establecimiento
            **kwargs: Par√°metros adicionales espec√≠ficos del m√≥dulo
            
        Returns:
            True si todo el proceso fue exitoso
        """
        try:
            # Pre-ejecuci√≥n
            if not self.pre_execute(**kwargs):
                return False
            
            # Ejecuci√≥n principal
            success = self.execute(usuario, **kwargs)
            
            # Post-ejecuci√≥n
            self.post_execute(success, **kwargs)
            
            return success
            
        except Exception as e:
            self.logger.error(f"Error inesperado en {self.display_name}: {str(e)}")
            self.post_execute(False, **kwargs)
            return False